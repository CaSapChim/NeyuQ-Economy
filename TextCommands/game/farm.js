const Discord = require('discord.js');
const emoji = require('../../emoji.json');
const plantModel = require('../../database/models/userDataJob/plantModel');
const trackingTuoiCayModel = require('../../database/models/trackingTuoiCayModel');

module.exports = {
    name: 'farm',
    description: "Xem th√¥ng tin trang tr·∫°i c·ªßa m√¨nh",
    adminOnly: false,
    /**
     * 
     * @param {Discord.Client} client 
     * @param {Discord.Message} message 
     * @param {*} args 
     */
    run: async (client, message, args) => {
        const author = message.author.id;

        function u(plant, time) {
            return (plant > 0 && time == ` `) ? `${emoji.success}` : `<a:xo_cross:1166752009840500857>`;
        }
        
        async function a(plant, name) {
            let data = await plantModel.findOne({ userId: author, plantName: name });
            if (!data)
                data = new plantModel({ userId: author, plantName: name});
            await data.save();
            const currentDate = Date.now();
            const elapsedMillis = currentDate - data.timeTuoi;
            return (plant > 0 && elapsedMillis > 3 * 60 * 1000 && data.canHarvest == false) ? "üíß" : "";
        }
        
        const [
            soLuongLua,
            soLuongDau,
            soLuongBi,
            soLuongDuaHau,
            soLuongKhoaiTay,
            soLuongCaRot,
            soLuongBo,
            soLuongGa,
            soLuongHeo,
            soLuongDat,
            tongBo,
            tongGa,
            tongHeo,
            timeLua,
            timeDau,
            timeBi,
            timeDuaHau,
            timeKhoaiTay,
            timeCaRot,
            timeBo,
            timeGa,
            timeHeo,
        ] = await Promise.all([
            client.plant(author, "h·∫°t l√∫a"),
            client.plant(author, "h·∫°t ƒë·∫≠u"),
            client.plant(author, "h·∫°t b√≠"),
            client.plant(author, "h·∫°t d∆∞a h·∫•u"),
            client.plant(author, "khoai t√¢y"),
            client.plant(author, "c√† r·ªët"),
            client.animalFed(author, "b√≤"),
            client.animalFed(author, "g√†"),
            client.animalFed(author, "heo"),
            client.xemDat(author), 
            client.xemAnimal(author, "b√≤"),
            client.xemAnimal(author, "g√†"),
            client.xemAnimal(author, "heo"),
            client.checkTimePlant(author, "h·∫°t l√∫a"),
            client.checkTimePlant(author, "h·∫°t ƒë·∫≠u"),
            client.checkTimePlant(author, "h·∫°t b√≠"),
            client.checkTimePlant(author, "h·∫°t d∆∞a h·∫•u"),
            client.checkTimePlant(author, "khoai t√¢y"),
            client.checkTimePlant(author, "c√† r·ªët"),
            client.checkTimeAnimal(author, "b√≤"),
            client.checkTimeAnimal(author, "g√†"),
            client.checkTimeAnimal(author, "heo"),
        ]);
        
        const [
            tuoiCayLua,
            tuoiCayDau,
            tuoiCayBi,
            tuoiCayDuaHau,
            tuoiCayKhoaiTay,
            tuoiCayCaRot,
        ] = await Promise.all([
            a(soLuongLua, "h·∫°t l√∫a"),
            a(soLuongDau, "h·∫°t ƒë·∫≠u"),
            a(soLuongBi, "h·∫°t b√≠"),
            a(soLuongDuaHau, "h·∫°t d∆∞a h·∫•u"),
            a(soLuongKhoaiTay, "khoai t√¢y"),
            a(soLuongCaRot, "c√† r·ªët")
        ])

        const embed = new Discord.EmbedBuilder()
            .setTitle('Th√†nh ph·∫ßn n√¥ng tr·∫°i c·ªßa b·∫°n')
            .setDescription(`
            > <:hand_with_plant:1155701041329872978> S·ªë l∆∞·ª£ng ƒë·∫•t c√≤n d∆∞: ${soLuongDat}
            
            > <:3331_minecraft_cow:1156555169396428830> T·ªïng s·ªë b√≤ ch∆∞a cho ƒÉn: ${tongBo}
            
            > <:Chicken17:1156557573219168307> T·ªïng s·ªë g√† ch∆∞a cho ƒÉn: ${tongGa}

            > <:technoblade64:1166408637623844924> T·ªïng s·ªë heo ch∆∞a cho ƒÉn: ${tongHeo} 
            `)
            .setColor('Green')
            .addFields(
                { name: 'C√¢y tr·ªìng', value: `
                ${u(soLuongLua, timeLua)} | **\`250\`** | <:LC_Wheat:1155701062670504037> L√∫a: ${soLuongLua} ${timeLua} ${tuoiCayLua}
                ${u(soLuongDau, timeDau)} | **\`251\`** | <:daunh_1:1156608655060381760> ƒê·∫≠u: ${soLuongDau} ${timeDau} ${tuoiCayDau}
                ${u(soLuongBi, timeBi)} | **\`252\`** | <:mc_carved_pumpkin45:1155704587462922272> B√≠: ${soLuongBi} ${timeBi} ${tuoiCayBi}
                ${u(soLuongDuaHau, timeDuaHau)} | **\`253\`** | <:Melon8:1166407706496733284> D∆∞a h·∫•u: ${soLuongDuaHau} ${timeDuaHau} ${tuoiCayDuaHau}
                ${u(soLuongKhoaiTay, timeKhoaiTay)} | **\`254\`** | <:potato45:1166650017264705547> Khoai t√¢y: ${soLuongKhoaiTay} ${timeKhoaiTay} ${tuoiCayKhoaiTay}
                ${u(soLuongCaRot, timeCaRot)} | **\`255\`** | <:Carrot29:1166650013603090432> C√† r·ªët: ${soLuongCaRot} ${timeCaRot} ${tuoiCayCaRot}
                `, inline: false },
                { name: 'V·∫≠t nu√¥i ƒë√£ cho ƒÉn', value: `
                ${u(soLuongBo, timeBo)} | **\`bo\`** | <:3331_minecraft_cow:1156555169396428830> B√≤: ${soLuongBo} ${timeBo}
                ${u(soLuongGa, timeGa)} | **\`ga\`** | <:Chicken17:1156557573219168307> G√†: ${soLuongGa} ${timeGa}
                ${u(soLuongHeo, timeHeo)} | **\`heo\`** | <:technoblade64:1166408637623844924> Heo: ${soLuongHeo} ${timeHeo}
                `, inline: false }
            )
            .setThumbnail(`https://cdn.discordapp.com/attachments/1080521432032882700/1170699192658841681/6300787.png?ex=6559fd96&is=65478896&hm=8aba6ff76840f4e7841bd77dab6c4066b4556dc7b33f6d1df7c5ff39c0aab7cd&`)
            .setTimestamp();
        
        const btnRow = new Discord.ActionRowBuilder().addComponents(
            new Discord.ButtonBuilder()
                .setCustomId('tuoicay')
                .setLabel("T∆Ø·ªöI C√ÇY")
                .setStyle(Discord.ButtonStyle.Primary),
            new Discord.ButtonBuilder()
                .setCustomId("thuhoach")
                .setLabel("THU HO·∫†CH")
                .setStyle(Discord.ButtonStyle.Success)
        )

        let duma = await message.reply({ embeds: [embed], components: [btnRow] });
        var collector = duma.createMessageComponentCollector({
            filter: interaction => 
                interaction.isButton() && interaction.message.author.id == client.user.id,
                time: 60000
        })

        collector.on("collect", async (interaction) => {
            if (interaction.user.id !== message.author.id) {
                return interaction.reply({ content: "N√∫t n√†y kh√¥ng d√†nh cho b·∫°n", ephemeral: true });
            }
        
            let data = await plantModel.find({ userId: interaction.user.id });
            if (interaction.customId === "tuoicay") {
                const currentDate = Date.now();
                let count = 0;
                if (data) {
                    for (let i = 0; i < data.length; i++) {
                        const elapsedMillis = currentDate - data[i].timeTuoi;
                        if (data[i].soLuongPlanted > 0 && elapsedMillis > 3 * 60 * 1000 && data[i].planted == true) {
                            count++;
                            data[i].plantedAt -= 2 * 60 * 1000;
                            data[i].timeTuoi = Date.now();
                            data[i].save();
                        }
                    }
                    if (count > 0) {
                        interaction.reply({ content: `<:420_feed_plants:1178589527477080154> B·∫°n ƒë√£ t∆∞·ªõi **${count}** c√¢y th√†nh c√¥ng v√† gi·∫£m **2 ph√∫t** tƒÉng tr∆∞·ªüng c·ªßa c√¢y!\nH·∫πn b·∫°n sau **3 ph√∫t** n·ªØa!`, ephemeral: true });
                        let dataTuoiCay = await trackingTuoiCayModel.findOne({
                            userId: interaction.user.id
                          })
                      
                          if (!dataTuoiCay) {
                            dataTuoiCay = new trackingTuoiCayModel({
                                userId: interaction.user.id,
                            })
                          }
                          await dataTuoiCay.save()
                          
                          if (dataTuoiCay.enable == true) {
                            setTimeout(() => {
                              message.reply(`${dataTuoiCay.text.length === 0 ? `\`T∆∞·ªõi c√¢y ƒëi\`` : dataTuoiCay.text}`)
                            }, 15000);
                          }
                    }
                    else
                        interaction.reply({ content: `Hi·ªán t·∫°i ch∆∞a c√≥ c√¢y n√†o c·∫ßn t∆∞·ªõi n∆∞·ªõc`, ephemeral: true });
                } else {
                    interaction.reply({ content: "B·∫°n ch∆∞a tr·ªìng c√¢y n√†o!", ephemeral: true });
                }
            } else {
                if (data) {
                    const hatToCayObj = {
                        "h·∫°t l√∫a": "l√∫a",
                        "h·∫°t ƒë·∫≠u": "h·∫°t ƒë·∫≠u",
                        "h·∫°t b√≠": "b√≠",
                        "h·∫°t d∆∞a h·∫•u": "d∆∞a h·∫•u",
                        "khoai t√¢y": "khoai t√¢y",
                        "c√† r·ªët": "c√† r·ªët",
                    }

                    const idHatToEmojiCay = {
                        "h·∫°t l√∫a": "<:LC_Wheat:1155701062670504037>",
                        "h·∫°t ƒë·∫≠u": "<:daunh_1:1156608655060381760>",
                        "h·∫°t b√≠": "<:mc_carved_pumpkin45:1155704587462922272>",
                        "h·∫°t d∆∞a h·∫•u": "<:Melon8:1166407706496733284>",
                        "khoai t√¢y": "<:potato45:1166650017264705547>",
                        "c√† r·ªët": "<:Carrot29:1166650013603090432>",
                    }

                    let msg = ``;
                    let count = 0;
                    for (let i = 0; i < data.length; i++) {
                        if (data[i].soLuongPlanted > 0 && data[i].planted && data[i].canHarvest) {
                            count++;
                            let result = data[i].soLuongPlanted * 2;
                            await client.thuHoach(interaction.user.id, data[i].plantName);
                            await client.addNongSan(interaction.user.id, hatToCayObj[data[i].plantName], result);    
                            await client.addDat(interaction.user.id, data[i].soLuongPlanted);
                            msg += `${result} ${idHatToEmojiCay[data[i].plantName]}\n`;
                        }
                    }
                    if (count > 0)
                        interaction.reply({ content: `**B·∫°n ƒë√£ thu ho·∫°ch th√†nh c√¥ng:**\n${msg}`, ephemeral: true });
                    else
                        interaction.reply({ content: "B·∫°n ch∆∞a tr·ªìng c√¢y n√†o ho·∫∑c l√† c√¢y ch∆∞a l·ªõn.", ephemeral: true });
                }
            }
        });

        collector.on("end", () => {
            btnRow.components[0].setDisabled(true);
            btnRow.components[1].setDisabled(true);
            embed.setColor("Grey")
            duma.edit({ embeds: [embed], components: [btnRow], content: `Tin nh·∫Øn ƒë√£ h·∫øt hi·ªáu l·ª±c.` });
        })
    }   
}