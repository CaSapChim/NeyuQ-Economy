const Discord = require("discord.js");
const emoji = require("../../emoji.json");
const userModel = require("../../database/models/userDataJob/userModel.js");
const sanPhamModel = require('../../database/models/userDataJob/sanPhamModel.js');
const thongKeModel = require('../../database/models/userDataJob/thongKeModel');
const profileModel = require('../../database/models/userDataJob/profileModel');
const jobModel = require('../../database/models/userDataJob/jobModel');
const premiumModel = require('../../database/models/userDataJob/premiumModel');

module.exports = {
    name: "dangky",
    description: "ƒêƒÉng k√≠ t√†i kho·∫£n ƒë·ªÉ ch∆°i c√°c tr√≤ ch∆°i c·ªßa bot",
    run: async (client, message, args) => {
        let userData, sanphamData, thongKeData, profileData, jobData, premiumData; 
        try {

          userData = await userModel.findOne({ userId: message.author.id });
          sanphamData = await sanPhamModel.findOne({ userId: message.author.id });
          thongKeData = await thongKeModel.findOne({ userId: message.author.id });
          profileData = await profileModel.findOne({ userId: message.author.id });
          jobData = await jobModel.findOne({ userId: message.author.id });
          premiumData = await premiumModel.findOne({ userId: message.author.id });

          if (!userData && !sanphamData && !thongKeData && !profileData && !jobData && !premiumData) {
            const tosEmbed = new Discord.EmbedBuilder()
              .setColor("Red")
              .setTitle("**ƒêI·ªÄU KHO·∫¢N S·ª¨ D·ª§NG - BOT GAME V√Ä H·ªÜ TH·ªêNG KINH T·∫æ**")
              .setDescription(`
              <a:NA_GeneralUpdates:1166628301817786408> Vui l√≤ng ƒë·ªçc k·ªπ v√† hi·ªÉu r√µ c√°c ƒëi·ªÅu kho·∫£n sau tr∆∞·ªõc khi s·ª≠ d·ª•ng bot c·ªßa ch√∫ng t√¥i. B·∫±ng c√°ch s·ª≠ d·ª•ng bot, b·∫°n ƒë·ªìng √Ω tu√¢n th·ªß t·∫•t c·∫£ c√°c ƒëi·ªÅu kho·∫£n d∆∞·ªõi ƒë√¢y. N·∫øu b·∫°n kh√¥ng ƒë·ªìng √Ω v·ªõi b·∫•t k·ª≥ ƒëi·ªÅu kho·∫£n n√†o, vui l√≤ng kh√¥ng s·ª≠ d·ª•ng bot.<a:NA_GeneralUpdates:1166628301817786408>
        
                      **1. Gian l·∫≠n v√† ph·∫ßn m·ªÅm th·ª© 3: **
        
                      1.1. Ch√∫ng t√¥i kh√¥ng ch·∫•p nh·∫≠n ng∆∞·ªùi d√πng s·ª≠ d·ª•ng ph·∫ßn m·ªÅm th·ª© 3 d∆∞·ªõi m·ªçi h√¨nh th·ª©c.
        
                      1.2. Ph√°t hi·ªán v√† l·ª£i d·ª•ng bug c·ªßa bot cho m·ª•c ƒë√≠ch c√° nh√¢n s·∫Ω b·ªã BAN th·∫≥ng tay. 
                      
                      **2. S·ª± thay ƒë·ªïi v√† c·∫≠p nh·∫≠t: **
    
                      2.1 H√£y theo d√µi k√™nh <#1118050184312664094> th∆∞·ªùng xuy√™n ƒë·ªÉ bi·∫øt th√™m nh·ªØng c·∫≠p nh·∫≠t m·ªõi v·ªÅ bot.
                      
                      **Li√™n h·ªá:**
                      
                      <a:Glitch_warn:1166628298374266971> N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc ho·∫∑c b√°o l·ªói n√†o, vui l√≤ng li√™n h·ªá <@874321270437728257> ho·∫∑c <@942356413546635264>.
                    `);
    
            const tosBtn = new Discord.ButtonBuilder()
              .setCustomId("accept")
              .setLabel("Ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n")
              .setStyle(Discord.ButtonStyle.Primary)
              .setEmoji("üëç")
    
            const row = new Discord.ActionRowBuilder().addComponents(tosBtn);
    
            const a = await message.reply({
              content: "**## B·∫±ng c√°ch s·ª≠ d·ª•ng bot, b·∫°n x√°c nh·∫≠n ƒë√£ ƒë·ªçc, hi·ªÉu v√† ch·∫•p nh·∫≠n t·∫•t c·∫£ c√°c ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng. N·∫øu b·∫°n kh√¥ng ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n n√†y, vui l√≤ng kh√¥ng s·ª≠ d·ª•ng bot.**",
              embeds: [tosEmbed],
              components: [row],
            });
    
            var collector = a.createMessageComponentCollector({
              filter: (interaction) =>
                (interaction.isButton() || interaction.isSelectMenu()) &&
                interaction.message.author.id == client.user.id,
              time: 5 * 60000,
            });
    
            collector.on("collect", async (interaction) => {
              if (interaction.user.id !== message.author.id)
                return interaction.reply({
                  content: "N√†y, n√∫t n√†y kh√¥ng ph·∫£i d√†nh cho b·∫°n!",
                  ephemeral: true,
                });
              if (interaction.customId === "accept") {
                interaction.deferUpdate();
    
                userData = new userModel({
                  userId: message.author.id,
                });
    
                sanphamData = new sanPhamModel({
                  userId: message.author.id
                })
    
                thongKeData = new thongKeModel({
                  userId: message.author.id
                })

                profileData = new profileModel({
                  userId: message.author.id
                })

                jobData = new jobModel({
                  userId: message.author.id
                })

                premiumData = new premiumModel({
                  userId: message.author.id
                })
    
                const embed = new Discord.EmbedBuilder()
                  .setColor('Green')
                  .setDescription(`
                  <:pink_reply:1166330261315801158> C·∫£m ∆°n <@${message.author.id}> ƒë√£ ƒë·ªìng √Ω ch·∫•p h√†nh lu·∫≠t 
                  <:pink_reply:1166330261315801158> T·∫∑ng b·∫°n **10000 <:O_o:1135831601205481523> coins ƒë·ªÉ kh·ªüi nghi·ªáp**
                  `); 
    
                a.edit({ embeds: [embed], components: [], content: "" });
                await userData.save();
                await sanphamData.save();
                await thongKeData.save();
                await profileData.save();
                await jobData.save();
                await premiumData.save();
      
                await client.addTien(message.author.id, 10000);
              }
            });
    
            collector.on("end", async () => {
              await a.delete();
            });
            return;
        } 
        else {
            message.reply("B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh t√†i kho·∫£n r·ªìi.");
        }
        } catch (err) {
          console.log("L·ªói khi t·∫°o db cho user:", err);
        }
    }
}